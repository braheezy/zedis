const std = @import("std");

const Buffer = @import("Buffer.zig");
const Dlist = @import("Dlist.zig");
const max_msg_size = @import("root.zig").max_msg_size;

pub const Conn = @This();

fd: std.posix.socket_t,
// application's intention, for the event loop
want_read: bool = false,
want_write: bool = false,
want_close: bool = false,
// buffered input and output
// data to be parsed by the application
incoming: Buffer,
// responses generated by the application
outgoing: Buffer,
// timer
last_active_ms: u64 = 0,
idle_node: Dlist = undefined,

pub fn init(allocator: std.mem.Allocator, fd: std.posix.socket_t) !*Conn {
    const conn = try allocator.create(Conn);
    conn.* = Conn{
        .fd = fd,
        .incoming = try Buffer.init(allocator),
        .outgoing = try Buffer.init(allocator),
    };
    return conn;
}

pub fn deinit(self: *Conn, allocator: std.mem.Allocator) void {
    self.incoming.deinit();
    self.outgoing.deinit();
    allocator.destroy(self);
}
